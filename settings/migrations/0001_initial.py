# Generated by Django 2.2.7 on 2019-12-03 11:12

from django.db import migrations, models
import django.db.models.deletion
import datetime
import json
from settings.models import Country, State, City, Company, CompanyPhysicalAddress, CompanyJobOffer


def load_data(apps, schema_editor):
    f = open('settings/models/json_file/countries_states_cities.json', 'r')
    json_data = json.load(f)

    for obj in json_data:
        if obj['name'] == 'countries':
            for country in obj['data']:
                c = Country(id=country['id'], name=country['name'], code=country['code'],
                            dial_code=country['dial_code'], currency=country['currency'])
                c.save()
        if obj['name'] == 'states':
            for state in obj['data']:
                s = State(id=state['id'], country_id=state['country_id'], name=state['name'],
                          created_at=datetime.datetime.now())
                s.save()
        if obj['name'] == 'cities':
            for city in obj['data']:
                ct = City(id=city['id'], state_id=city['state_id'], name=city['name'])
                ct.save()

    company = open('settings/models/json_file/company.json', 'r')
    company_json_data = json.load(company)

    for obj in company_json_data:
        if obj['name'] == 'companies':
            for company in obj['data']:
                c = Company(id=company['id'], name=company['name'], short_name=company['short_name'])
                c.save()
        if obj['name'] == 'company_physical_addresses':
            for address in obj['data']:
                c = CompanyPhysicalAddress(
                    id=address['id'], company_id=address['company_id'], address_line_1=address['address_line_1'],
                    address_line_2=address['address_line_2'], country_id=address['country_id'],
                    state_id=address['state_id'], city_id=address['city_id'], area=address['area'],
                    postal_code=address['postal_code']
                )
                c.save()
        if obj['name'] == 'company_job_offers':
            for company_job_offer in obj['data']:
                c = CompanyJobOffer(id=company_job_offer['id'], company_id=company_job_offer['company_id'],
                                    job_type=company_job_offer['job_type'])
                c.save()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('short_name', models.CharField(max_length=100)),
                ('ownership_type', models.CharField(choices=[('public-limited', 'Public Limited'), ('public-limited', 'Joint Venture'), ('public-limited', 'Proprietor'), ('public-limited', 'Private Limited'), ('public-limited', 'Partnership'), ('public-limited', 'Others')], max_length=20)),
                ('establishment_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.BooleanField(blank=True, default=True)),
                ('company_start_date', models.DateField(blank=True, null=True)),
                ('company_end_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(blank=True, max_length=11, null=True)),
                ('name', models.CharField(max_length=255, null=True)),
                ('dial_code', models.CharField(max_length=255, null=True)),
                ('currency', models.CharField(max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, null=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.Country')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyPhysicalAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line_1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line_2', models.CharField(blank=True, max_length=255, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.BooleanField(blank=True, default=True)),
                ('address_start_date', models.DateField(blank=True, null=True)),
                ('address_end_date', models.DateField(blank=True, null=True)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='settings.City')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='settings.Company')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='settings.Country')),
                ('state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='settings.State')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyJobOffer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('job_type', models.CharField(choices=[('none', ''), ('software-developer', 'Software Developer'), ('banker', 'Banker'), ('business-development', 'Business Development'), ('android', 'Android'), ('web', 'Web Design'), ('ui-ux', 'UI/UX'), ('teaching', 'Teaching'), ('training', 'Training'), ('garments', 'Garments')], default='none', max_length=255)),
                ('status', models.BooleanField(blank=True, default=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='settings.Company')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.State'),
        ),
        migrations.RunPython(load_data),
    ]
